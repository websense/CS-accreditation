# Python script to generate latex outputs using the Python dictionary of dictionaries generated by knolwedgebase.py 
# This script populates a set of Latex templates for an ACS submission
# @ Author Rachel Cardell-Oliver 
# @ Author Original script by MIT team 12 accreditation mapper project
# @Version 29 Oct 2024

import pandas as pd
import os
import json
import knowledgebase as kb

# open config.json and get name of knowledge file
config_path = os.path.join(os. getcwd(), 'config.json')
#print("Config file:" + config_path)
try:
	with open(config_path, 'r') as f:
		config = json.load(f)
		print("Configuration loaded successfully:") #, config)
except FileNotFoundError:
	print(f"Error: config.json file not found at {config_path}")
except json.JSONDecodeError:
	print("Error: Failed to decode the config.json file")

# course list is kb.courseSet
programtemplatefile = os.getcwd()+config["latexProgramTemplate"]
#mappingtemplatefile = os.getcwd()+config["latexMappingTemplate"] #not required
latexoutputs = os.getcwd()+config["latexTablesOutput"]

# generate staff CVs table for part 1
staffcvs = kb.acsDict['StaffCVs']
stafftable = staffcvs[staffcvs.columns[:-1]].copy()
#create names with hyperlink to research repository URL
stafftable['Name'] = "\\href{" + staffcvs['Research repository URL']  + "}{"+ staffcvs['Name']  +  " }"

outfile = latexoutputs+"StaffCVs.tex"
fout = open(outfile, "w") 
fout.write(stafftable.to_latex(index=False, column_format="p{3.5cm} p{.5cm} p{.5cm}  p{.6cm} p{.5cm} p{7cm}"+"\n\n").replace("00000","") )
fout.close()
	
	
# generate per-program latex templates (but use caidi outcomes map not this)
for course in kb.courseSet:
	print(course)
	#get program template text for modification
	#for i in [0,1]:
	template = programtemplatefile #mappingtemplatefile][i]
	infile = open(template,"r")
	ftext =  infile.read()
	infile.close()
	#modify template by substituting this course name and write it to the submission directory
	#if (i==0):
	outfile = latexoutputs+course+"-Program.tex"
	#else:
	#outfile1 = latexoutputs+course+"-Outcomes-Map.tex"
	fout = open(outfile, "w") 
	fout.write(ftext.replace("THISPROG",course))
	fout.close()


## given a latex table string, generate string with stripped header and footer and output just the row data with row seps
def to_latex_table_rowsonly(mytablestr):
	#delete start up to and including \midrule\n
	noheader = mytablestr.partition('\\midrule\n')[2]
	rowsonly = noheader.replace('bottomrule','hline')
	rowsonly = rowsonly.replace("\\\\\n","\\\\ \\hline\n") #need row lines for readability
	rowsonly = rowsonly.replace(".000000","")  #don't know why ints were interpreted as floats
	#delete footer - problem with an extra field somewhere?
	#rowsonly = noheader.partition('\\bottomrule\n\\end{tabular}\n')[0]	
	return rowsonly



# tables for criterionA
for course in kb.courseSet:
	fname = latexoutputs + "criterionA-"+course+".tex"
	fA = open(fname, "w") 
	ta = kb.acsDict["A"][course].copy()
	for row in ['Handbook', 'Curriculum', 'Study Plan']:
		u1 = ta.loc[ta['Program Details']==row, 'Description or URL'].values[0] #get string
		u11 = "\\href{"+u1+"}{"+row+" Details}"
		ta.replace(u1, u11, inplace=True)
	mytable = ta.to_latex(index=False)
	#mytable = formattable( mytable )  WIP revisit this
	fA.write( mytable )
	fA.close()

# tables for criterionB
for course in kb.courseSet:
	fname = latexoutputs + "criterionB-"+course+".tex"
	fB = open(fname, "w") 
	fB.write("\\paragraph{Professional Role:}"+kb.acsDict["B"][course]['Role']+"\n\n")
	tb = kb.acsDict["B"][course]["Units"].copy()
	for ind in tb.index: #every row
		c1 = tb['SFIA Skill Code'][ind]
		u1 = tb['SFIA-9 URL'][ind]
		c11 = "\\href{"+u1+"}{"+c1+"}"
		tb.loc[ind, 'SFIA Skill Code']  = c11  #update table sfia code with href version
	mytable = tb.loc[:,('SFIA Skill Code', 'SFIA level','Unit Code','Unit Name')]
	#don't know why ints were interpreted as floats
	fB.write(mytable.to_latex(index=False, column_format="c c l l "+"\n\n").replace(".000000","") )
	fB.close()


# tables for criterionC 
for course in kb.courseSet:
	fname = latexoutputs + "criterionC-"+course+".tex"
	fC = open(fname, "w") 
	mytable1 = kb.acsDict["C"][course]["Map Table"]
	#remove header and footer info: just the rows
	fC.write( to_latex_table_rowsonly(mytable1.to_latex()) )
	fC.close()


# tables for criterion D
for course in kb.courseSet:
	fname = latexoutputs + "criterionD-"+course+".tex"
	fD = open(fname, "w") 
	td = kb.acsDict["D"][course]
	fD.write("\\begin{small} \n\n")
	dtab = td.to_latex(index=False, column_format="P{1.4cm} P{2cm} P{2cm} P{7cm}"+"\n\n")
	dtab = dtab.replace("\\\\\n","\\\\ \\hline\n") #need row lines for readability
	fD.write(dtab)
	fD.write("\\end{small} \n\n")
	fD.close()

# tables for criterion E
for course in kb.courseSet:
	fname = latexoutputs + "criterionE-"+course+".tex"
	fE = open(fname, "w") 
	te = kb.acsDict["E"][course]
	fE.write("\\begin{small} \n\n")
	fE.write(te.to_latex(index=False, column_format="P{1.4cm} P{2cm} P{9cm}"+"\n\n"))
	fE.write("\\end{small} \n\n")
	fE.close()

# tables for criterion F
for course in kb.courseSet:
	fname = latexoutputs + "criterionF-"+course+".tex"
	fF = open(fname, "w") 
	tf = kb.acsDict["F"][course]["Practice"] #just text
	fF.write("\\begin{small} \n\n")
	fF.write(tf)
	fF.write("\\end{small} \n\n")
	fF.close()



# appendix: criterionC justifications
fname = latexoutputs + "appendix-criterionCjustification.tex"
fC = open(fname, "w") 
#fC.write("\\begin{landscape}\n\\begin{scriptsize} \n") #tried landscape but still not readable
fC.write("Note. Work in progress - generate justification table for all units at once\n\n")
fC.write("\\begin{scriptsize} \n")
mytable2 = kb.acsDict["C"]["MJD-CMPSC"]["Justification Table"]
longtab = mytable2.to_latex(index=False, column_format="| P{2cm} | P{1.5cm}  | P{8.5cm} |"+"\n\n")
longtab = longtab.replace("\\\\\n","\\\\ \\hline\n") #need row lines for readability
fC.write(longtab.replace("tabular","longtable"))
#fC.write("\\end{scriptsize}\n\\end{landscape}\n") #tried landscape but still not readable
fC.write("\\end{scriptsize}\n")
fC.close()


## NOT NEEDED use the caidi mapping tables
## unit to program output mappings to a new file with A3 page
'''
for course in kb.courseSet:
	fname = latexoutputs+course+"-Outcomes-Map.tex"
	fM = open(fname, "w") 
	tm = kb.acsDict["OutMap"][course]
	n = len(tm.columns)-1  #how many mapping cols?
	fmt = "P{1cm} *{" + str(n) + "}{P{1cm}}  P{8cm}"
	mytab = tm.to_latex(column_format=fmt) +"\n\n" 
	mytab = mytab.replace("tabular","longtable")
	mytab = mytab.replace("\\\\\n","\\\\ \\hline\n") #need row lines for readability
	fM.write(mytab)
	fM.close()
'''