# Python script to generate MSWord outputs using the Python dictionary of dictionaries generated by knolwedgebase.py 
# This script populates a set of MSword files with selected tables for an ACS submission
# @ Author Rachel Cardell-Oliver 
# @ Author Original script by MIT team 12 accreditation mapper project
# @ Author https://rowannicholls.github.io/python/data/export_to_word.html
# @ Author https://www.geeksforgeeks.org/working-with-tables-python-docx-module/
# @Version 22 Mar 2025


## TODO NEXT make a docx template and insert data into that
## https://github.com/elapouya/python-docx-template/tree/master
# https://medium.com/@lukas.forst/supercharge-your-word-reports-using-python-docx-template-4e9ebfc66b9e

import pandas as pd
import knowledgebase as kb
import os
import json
import docx

# open config.json
config_path = os.path.join(os. getcwd(), 'config.json')
#print("Config file:" + config_path)
try:
	with open(config_path, 'r') as f:
		config = json.load(f)
		print("Configuration loaded successfully:") #, config)
except FileNotFoundError:
	print(f"Error: config.json file not found at {config_path}")
except json.JSONDecodeError:
	print("Error: Failed to decode the config.json file")


## Tables required: B, C (and program structure)

# 1. generate per-program word templates
for course in kb.courseSet:
	# Initialise the Word document for this course
	fname = os.getcwd()+config["msWordOutput"]+course+".docx"
	doc = docx.Document()
	doc.add_heading("Tables B and C for "+course, 0)
	
	doc.add_heading("Criterion B SFIA", 1)
	doc.add_paragraph("Professional Role: "+kb.acsDict["B"][course]['Role'])
	
	# get Table B for this course
	tb = kb.acsDict["B"][course]["Units"].copy()
	tbc = tb.loc[:,('SFIA Skill Code', 'SFIA level','Unit Code','Unit Name')]
	# Initialise the table in ms word
	t = doc.add_table(rows=tbc.shape[0]+1, cols=tbc.shape[1])
	# Add borders
	t.style = 'Table Grid'  #'Light Shading Accent 1' #more interesting blue grid
	# Add the (short) column headings
	for j in range(tbc.shape[1]):
    		t.cell(0, j).text = tbc.columns[j]
	#reset some shorter names
	t.cell(0,0).text = 'Code'
	t.cell(0,1).text = 'Level'
	# Add the body of the data frame
	for i in range(tbc.shape[0]):
    		for j in range(tbc.shape[1]):
        			cell = tbc.iat[i, j]
        			t.cell(i+1, j).text = str(cell)
			
	# Write Table C
	doc.add_heading("Criterion C CBOK", 1)
	# get Table C for this course
	tcc = kb.acsDict["C"][course]["Map Table"]
	# Initialise the table in ms word
	t = doc.add_table(rows=tcc.shape[0]+1, cols=tcc.shape[1]+1)
	# Add borders
	t.style = 'Table Grid'
	# Add the column headings RETURN HERE THESE NEED TO BE ROTATED OR USE A TEMPLATE
	#for j in range(tcc.shape[1]):
	#	t.cell.text_orientation = t.cell.TextOrientation.DOWNWARD
    	#	t.cell(0, j+1).text = tcc.columns[j]
	# Add the body of the data frame
	for i in range(tcc.shape[0]): 
		t.cell(i+1,0).text = tcc.index[i] #rownames
		for j in range(tcc.shape[1]): 
			cell = tcc.iat[i, j]
			t.cell(i+1, j+1).text = str(cell)
	# Save the Word doc
	doc.save(fname)	


